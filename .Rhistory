solve(A, b)
}
reject_func_param_equal_tail(1,3,10,0.2,0.1)
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
left_rej <- seq(0, c1 - 1)
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
reject_func_param_equal_tail(1,3,10,0.2,0.1)
reject_func_param_equal_tail(1,3,10,0.2,0.1)
reject_func_param_equal_tail(0,3,10,0.2,0.1)
reject_func_param_equal_tail(0,4,10,0.2,0.1)
reject_func_param_equal_tail(1,4,10,0.2,0.1)
reject_func_param_equal_tail(2,4,10,0.2,0.1)
0.05/dbinom(1, 10, 0.2)
0.05/dbinom(0, 10, 0.2)
seq(0, -1)
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
if (c1 < 0) {
left_rej <- numeric(0)
}
left_rej <- seq(0, c1 - 1)
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
reject_func_param_equal_tail(2,4,10,0.2,0.1)
reject_func_param_equal_tail(1,4,10,0.2,0.1)
reject_func_param_equal_tail(10,4,10,0.2,0.1)
reject_func_param_equal_tail(0,4,10,0.2,0.1)
dbinom(-1, 10, 0.2)
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
if (c1 < 0) {
left_rej <- -1
}
left_rej <- seq(0, c1 - 1)
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
if (c1 <= 0) {
left_rej <- -1
}
left_rej <- seq(0, c1 - 1)
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
reject_func_param_equal_tail(0,4,10,0.2,0.1)
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
if (c1 <= 0) {
left_rej <- -1
} else {
left_rej <- seq(0, c1 - 1)
}
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
reject_func_param_equal_tail(0,4,10,0.2,0.1)
reject_func_param_equal_tail(0,4,10,0.2,0.1)
reject_func_param_equal_tail(0,5,10,0.2,0.1)
reject_func_param_equal_tail(0,3,10,0.2,0.1)
reject_func_param_equal_tail(1,3,10,0.2,0.1)
reject_func_param_equal_tail(0,3,10,0.2,0.1)
reject_func_param_equal_tail(1,310,0.2,0.1)
reject_func_param_equal_tail(1,3,0.2,0.1)
reject_func_param_equal_tail(0,3,10,0.2,0.1)
reject_func_param_equal_tail(0, 3, 10, 0.2, 0.1)
reject_func_param_equal_tail(0, 4, 10, 0.2, 0.1)
reject_func_param_equal_tail(1, 4, 10, 0.2, 0.1)
reject_func_param_equal_tail(0, 4, 10, 0.2, 0.1)
reject_func_param_equal_tail(2, 6, 10, 0.4, 0.05)
reject_func_param_equal_tail(1, 7, 10, 0.4, 0.05)
reject_func_param_equal_tail(0, 8, 10, 0.4, 0.05)
reject_func_param_equal_tail(1, 7, 10, 0.4, 0.05)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(0, 4, 0.465, 0.195, 10, p[i])
}
plot(p, beta, type = 'l')
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.470, 0.299, 10, p[i])
}
plot(p, beta, type = 'l')
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(0, 4, 0.465, 0.195, 10, p[i])
}
plot(p, beta, type = 'l')
beta %>% range()
range(beta)
log(0.00178)
## Unbiased test ----------------------
#
## --- --- --- --- --- --- --- --- --- --- --- --- ---
reject_func_param_unbiased <- function(c1, c2, n, p0, alpha) {
a11 <- dbinom(c1, n, p0)
a12 <- dbinom(c2, n, p0)
a21 <- dbinom(c1-1, n-1, p0)
a22 <- dbinom(c2-1, n-1, p0)
A <- matrix(c(a11, a12, a21, a22), nrow = 2, ncol = 2, byrow = TRUE)
x <- seq(c1, c2)
b <- c(
sum(dbinom(x, n, p0)) - 1 + alpha,
sum(dbinom(x-1, n-1, p0)) - 1 + alpha
)
solve(A, b)
}
## Equal-tailed test ----------------------
#
## --- --- --- --- --- --- --- --- --- --- --- --- ---
reject_func_param_equal_tail <- function(c1, c2, n, p0, alpha) {
if (c1 <= 0) {
left_rej <- -1
} else {
left_rej <- seq(0, c1 - 1)
}
right_rej <- seq(c2 + 1, n)
gamma1 <-
(alpha / 2 - sum(dbinom(left_rej, n, p0))) / dbinom(c1, n, p0)
gamma2 <-
(alpha / 2 - sum(dbinom(right_rej, n, p0))) / dbinom(c2, n, p0)
return(c(gamma1, gamma2))
}
power_func <- function(c1, c2, gamma1, gamma2, n, p0) {
x_rej <- setdiff(seq(0,n), seq(c1,c2))
sum(dbinom(x_rej, n, p0)) + gamma1 * dbinom(c1, n, p0) + gamma2 * dbinom(c2, n, p0)
}
## unbiased
# (i)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(0, 4, 0.559, 0.082, 10, p[i])
}
plot(p, beta, type = 'l')
# (ii)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.503, 0.268, 10, p[i])
}
plot(p, beta, type = 'l')
## equal-tailed
# (i)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(0, 4, 0.465, 0.195, 10, p[i])
}
plot(p, beta, type = 'l')
# (ii)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.470, 0.299, 10, p[i])
}
plot(p, beta, type = 'l')
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.503, 0.268, 10, p[i])
}
plot(p, beta, type = 'l')
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(0, 4, 0.465, 0.195, 10, p[i])
}
plot(p, beta, type = 'l')
min(beta)
p[which.min(beta)]
(ii)
# (ii)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.503, 0.268, 10, p[i])
}
plot(p, beta, type = 'l')
# (ii)
p <- seq(0,1,0.01)
beta <- rep(NA, length(p))
for (i in seq_len(length(p))) {
beta[i] <- power_func(1, 7, 0.470, 0.299, 10, p[i])
}
plot(p, beta, type = 'l')
df <- read.csv("./Data/df_classes.csv")
library(tidyverse)
library(glmnet)
library(olsrr)
setwd("../Desktop/Duke Univeristy MB Program/BIOSTAT 707/BIOSTAT707-Project/")
df <- read.csv("./Data/df_classes.csv")
df %>% head()
df$County.FIPS
df$County.FIPS %>% typeof()
df$County.FIPS %>% unique() %>% length()
df$County.FIPS %>% unique() %>% sample_frac(size = 0.01)
df$County.FIPS %>% unique() %>% sample(size = 0.01)
df$County.FIPS %>% unique() %>% sample(size = 0.8 * 3104)
df$County.FIPS %>% unique() %>% sample(size = 0.8 * 3104) %>% length()
df$County.FIPS %>% unique() %>% sample(size = 0.8 * 3104) %>% length() / 3104
df$County.FIPS %>% unique() %>% sample(size = round(0.8 * 3104)) %>% length() / 3104
df$County.FIPS %>% unique() %>% sample(size = ceiling(0.8 * 3104)) %>% length() / 3104
county_fips_code <- unique(df$County.FIPS)
M <- length(county_fips_code)
train_county_fips <- sample(county_fips_code, size = ceiling(0.8 * 3104))
test_county_fips <- setdiff(county_fips_code, train_county_fips)
train_test_split <- function(df, frac = 0.8) {
county_fips_code <- unique(df$County.FIPS)
M <- length(county_fips_code)
train_county_fips <-
sample(county_fips_code, size = ceiling(0.8 * 3104))
test_county_fips <- setdiff(county_fips_code, train_county_fips)
return(list(train = df[df$County.FIPS %in% train_county_fips, ],
test = df[df$County.FIPS %in% test_county_fips, ]))
}
train_test_split(df)
train_test_split(df) %>% sapply(dim)
# drop index, FIPS, State, Year
df <- df %>% select(-FIPS, -State, -Year, -County, -forest, -dev)
df_summarized <- df %>%
group_by(County.FIPS) %>%
summarise_all(mean) %>%
select(-County.FIPS)
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
fixed_lm
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
df_summarized
df_summarized[,2:]
df_summarized[,2:ncol(df_summarized)]
df_summarized[,2:ncol(df_summarized)] <- scale(df_summarized[,2:ncol(df_summarized)])
df_summarized
df_summarized %>% ncol()
df_summarized %>% colnames()
df_summarized <- df %>%
group_by(County.FIPS) %>%
summarise_all(mean) %>%
select(-County.FIPS)
df_summarized
df_summarized[,2:(ncol(df_summarized)-2)] <- scale(df_summarized[,2:(ncol(df_summarized)-2)])
View(df_summarized)
df_summarized$Forest.Classes..FIXED. <- as.factor(df_summarized$Forest.Classes..FIXED.)
df_summarized$Development.Classes..FIXED. <- as.factor(df_summarized$Development.Classes..FIXED.)
# select fixed effect
lasso <- cv.glmnet(
scale(model.matrix(Mortality ~ 0 + ., data = df_summarized), center = TRUE, scale = TRUE),
df_summarized$Mortality,
family = "gaussian",
alpha = 1,
nfolds = 10
)
lasso$glmnet.fit$beta
lasso$glmnet.fit$dev.ratio
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
lasso$cvsd
lasso$cvm
sqrt(lasso$cvm[lasso$lambda == lasso$lambda.1se])
sqrt(lasso$cvm[lasso$lambda == lasso$lambda.min])
stepwise
stepwise$predictors
selected_vars <- stepwise$predictors
selected_vars
df_trunc <- df[, selected_vars]
df_trunc
c(selected_vars, "h")
df_trunc <- df[, c("Mortality", selected_vars)]
## Truncated data ----------------------
# select variables for data reduction
## --- --- --- --- --- --- --- --- --- --- --- --- ---
df <- read.csv("./Data/df_classes.csv")
df_trunc <- df[, c("Mortality", "County.FIPS", selected_vars)]
split <- train_test_split(df_trunc)
split[["test"]]
split[["test"]]$Forest.Classes..FIXED. %>% table()
split[["train"]]$Forest.Classes..FIXED. %>% table()
split$train
# drop county fips code
train <- split$train %>% select(-County.FIPS)
test <- split$test %>% select(-County.FIPS)
prep_fixed_data <- function(df) {
df <- df %>% select(-FIPS, -State, -Year, -County, -forest, -dev)
df_summarized <- df %>%
group_by(County.FIPS) %>%
summarise_all(mean) %>%
select(-County.FIPS)
df_summarized[,2:(ncol(df_summarized)-2)] <- scale(df_summarized[,2:(ncol(df_summarized)-2)])
df_summarized$Forest.Classes..FIXED. <- as.factor(df_summarized$Forest.Classes..FIXED.)
df_summarized$Development.Classes..FIXED. <- as.factor(df_summarized$Development.Classes..FIXED.)
return(df_summarized)
}
train_test_split <- function(df, frac = 0.8) {
county_fips_code <- unique(df$County.FIPS)
M <- length(county_fips_code)
train_county_fips <-
sample(county_fips_code, size = ceiling(frac * 3104))
test_county_fips <- setdiff(county_fips_code, train_county_fips)
return(list(train = df[df$County.FIPS %in% train_county_fips, ],
test = df[df$County.FIPS %in% test_county_fips, ]))
}
prep_fixed_data <- function(df) {
df <- df %>% select(-FIPS, -State, -Year, -County, -forest, -dev)
df_summarized <- df %>%
group_by(County.FIPS) %>%
summarise_all(mean) %>%
select(-County.FIPS)
df_summarized[,2:(ncol(df_summarized)-2)] <- scale(df_summarized[,2:(ncol(df_summarized)-2)])
df_summarized$Forest.Classes..FIXED. <- as.factor(df_summarized$Forest.Classes..FIXED.)
df_summarized$Development.Classes..FIXED. <- as.factor(df_summarized$Development.Classes..FIXED.)
return(df_summarized)
}
stepwise_selection <- function(df) {
df_summarized <- prep_fixed_data(df)
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
## Truncated data ----------------------
# select variables for data reduction
## --- --- --- --- --- --- --- --- --- --- --- --- ---
df <- read.csv("./Data/df_classes.csv")
split <- train_test_split(df_trunc)
split <- train_test_split(df)
split[["test"]]
prep_fixed_data(split[["test"]])
prep_fixed_data(split[["train"]])
split[["train"]] %>% prep_fixed_data() %>% stepwise_selection()
## Truncated data ----------------------
# select variables for data reduction
## --- --- --- --- --- --- --- --- --- --- --- --- ---
df <- read.csv("./Data/df_classes.csv")
split <- train_test_split(df)
split[["train"]] %>% prep_fixed_data()
split[["train"]] %>% prep_fixed_data()
split[["train"]] %>% prep_fixed_data() -> t
View(t)
stepwise_selection(t)
split[["train"]] %>% stepwise_selection()
lm(Mortality ~ ., data = t)
stepwise_selection <- function(df) {
df_summarized <- prep_fixed_data(df)
print("!!!")
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
stepwise_selection <- function(df) {
df_summarized <- prep_fixed_data(df)
print("!!!")
print(shape(df_summarized))
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
stepwise_selection <- function(df) {
df_summarized <- prep_fixed_data(df)
print("!!!")
print(dim(df_summarized))
fixed_lm <- lm(Mortality ~ ., data = df_summarized)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
stepwise_selection <- function(df) {
df_summay <- prep_fixed_data(df)
print("!!!")
print(dim(df_summarized))
fixed_lm <- lm(Mortality ~ ., data = df_summay)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
stepwise_selection <- function(df) {
df_summay <- prep_fixed_data(df)
print("!!!")
print(dim(df_summary))
fixed_lm <- lm(Mortality ~ ., data = df_summay)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
stepwise_selection <- function(df) {
df_summary <- prep_fixed_data(df)
print("!!!")
print(dim(df_summary))
fixed_lm <- lm(Mortality ~ ., data = df_summary)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
rm(stepwise_selection)
df_fixed <- prep_fixed_data(df)
rm(df_fixed)
stepwise_selection <- function(df) {
df_summary <- prep_fixed_data(df)
print(dim(df_summary))
fixed_lm <- lm(Mortality ~ ., data = df_summary)
print("!!!!")
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
return(stepwise$predictors)
}
split[["train"]] %>% stepwise_selection()
split[["train"]] %>% stepwise_selection()
s
df_summary <- prep_fixed_data(df)
print(dim(df_summary))
fixed_lm <- lm(Mortality ~ ., data = df_summary)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
train <- split[["train"]]
train <- split[["train"]]
train_fixed <- prep_fixed_data(df)
fixed_lm <- lm(Mortality ~ ., data = train_fixed)
stepwise <- ols_step_both_p(fixed_lm, pent = 0.05, prem = 0.05)
stepwise$predictors
stepwise$predictors
stepwise
View(train)
View(train_fixed)
train %>% select(-FIPS, -State, -Year, -County, -forest, -dev) %>% View()
train %>% select(-FIPS, -State, -Year, -County, -forest, -dev) %>% View()
train %>% select(-FIPS, -State, -Year, -County, -forest, -dev) %>% View()
train %>% select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>% View()
train %>% select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>% View()
# drop county fips code
train <- split$train %>% select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev)
test <- split$train %>% select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev)
selected_var <- stepwise$predictors
# drop county fips code
train_trunc <- split$train %>%
select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>%
select(selected_var)
# drop county fips code
train_trunc <- split$train %>%
select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>%
select(all_of(selected_var))
train_trunc %>% View()
# drop county fips code
train_trunc <- split$train %>%
select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>%
select(Mortality, all_of(selected_var))
str(train_trunc)
train_trunc[, c(2, 4:20)]
View(train_trunc)
train_trunc %>% colnames()
train_trunc[, c(2, 4:21)] %>% head()
train_trunc[, c(2, 4:21)] <- scale(train_trunc[, c(2, 4:21)])
train_trunc
train_trunc[, c(2, 4:21)] <- scale(train_trunc[, c(2, 4:21)])
train_trunc <- split$train %>%
select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>%
select(Mortality, all_of(selected_var))
train_trunc[, c(2, 4:21)] <- scale(train_trunc[, c(2, 4:21)])
test_trunc <- split$test %>%
select(-FIPS, -County.FIPS, -State, -Year, -County, -forest, -dev) %>%
select(Mortality, all_of(selected_var))
test_trunc[, c(2, 4:21)] <- scale(test_trunc[, c(2, 4:21)])
train_trunc
lm(Mortality ~ ., data = train_trunc)
stepwise_model <- lm(Mortality ~ ., data = train_trunc)
predict(stepwise_model)
predict(stepwise_model) %>% unname()
stepwise_model$residuals
stepwise_model$residuals ^ 2
stepwise_model$residuals ^ 2 %>% suM()
stepwise_model$residuals ^ 2 %>% sum()
stepwise_model$residuals ^ 2 %>% mean()
stepwise_model$residuals ^ 2 %>% mean() %>% sqrt()
stepwise
stepwise_model$residuals ^ 2 %>% mean() %>% sqrt()
get_train_rmse <- function(model) {
sqrt(sum(model[["residuals"]]^2))
}
get_train_rmse(stepwise_model)
(stepwise_model$residuals)^2
get_train_rmse <- function(model) {
sqrt(mean(model[["residuals"]]^2))
}
get_train_rmse(stepwise_model)
predict(stepwise_model, newdata = test_trunc)
get_test_rmse <- function(model, test) {
yh <- predict(model, newdata = test)
y <- test$Mortality
sqrt(mean((y - yh)^2))
}
get_test_rmse(stepwise_model, test_trunc)
stepwise_model
stepwise

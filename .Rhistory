<<<<<<< Updated upstream
library(here)
df <- read_csv(here("Data", "cancer_mortality_SES.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(cluster)
library(factoextra)
library(here)
df <- read_csv(here("Data", "cancer_mortality_SES.csv"))
=======
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE")
}
#Overwrite Indicator
Overwrite <- TRUE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE")
}
#Overwrite Indicator
Overwrite <- FALSE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE")
}
#Overwrite Indicator
Overwrite <- FALSE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
(file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {Overwrite_Necessary <- FALSE}
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE")
}
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {Overwrite_Necessary <- FALSE}
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE")
}
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {Overwrite_Necessary <- FALSE}
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE, Operation Suspended")
}
#Overwrite Indicator
Overwrite <- TRUE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {Overwrite_Necessary <- FALSE}
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE, Operation Suspended")
}
#Overwrite Indicator
Overwrite <- FALSE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {Overwrite_Necessary <- FALSE}
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE, Operation Suspended")
}
#Clear the Environment
rm(list = ls())
#Import the Analytic Data
Analytic_Data <-
read.csv(here("df.csv"))
#Import the Analytic Data
Analytic_Data <-
read.csv(here("df.csv"))
#Set a Seed for Reproducibility
set.seed(15)
#Randomly Order all of the County FIPS and Place in Data Frame
Groups_Data <-
data.frame(sample(unique(Analytic_Data$County.FIPS),
length(unique(Analytic_Data$County.FIPS)),
replace = FALSE))
#Assign Group to County FIPS based on the Row Number
for (i in 1:nrow(Groups_Data)){
if (i <= round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 1} else
if (i <= 2 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 2} else
if (i <= 3 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 3} else
if (i <= 4 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 4} else
if (i <= 5 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 5} else
if (i <= 6 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 6} else
if (i <= 7 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 7} else
if (i <= 8 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 8} else
if (i <= 9 * round(nrow(Groups_Data) / 10)) {Groups_Data[i, 2] <- 9} else
{Groups_Data[i, 2] <- 10}
}
#Set Column Names
colnames(Groups_Data) <- c("County.FIPS", "County.FIPS.Group")
#Check the Number of Group Assignments
table(Groups_Data[, 2])
#Check to Determine if this Process has already been Completed
if (file.exists(here("df_with_County_Groups.csv")) == FALSE) {
#Create New Column in Analytic Data
Analytic_Data$County.FIPS.Group <- NA
#Add Assignments to Analytic Data
for (i in 1:nrow(Analytic_Data)) {
for (j in 1:nrow(Groups_Data)) {
if (Analytic_Data$County.FIPS[i] == Groups_Data$County.FIPS[j]) {
Analytic_Data$County.FIPS.Group[i] = Groups_Data$County.FIPS.Group[j]
}
}
#Progress Tracker
if ((i / 100) == round(i / 100)) {
#Clear Console
cat("\014")
#Print Percent Complete
print(paste(round((
i / nrow(Analytic_Data) * 100
), 4), "% Complete", sep = ""))
}
#Completion Indicator
if (i == nrow(Analytic_Data)) {
#Clear Console
cat("\014")
#Print Done
print("100% Complete - Done!")
}
}
} else {
Analytic_Data <- read.csv(here("df_with_County_Groups.csv"))
}
#Check the Number of Observations in each Group
table(Analytic_Data$County.FIPS.Group *
Analytic_Data$County.FIPS)
#Check the Number of Observations in each Group
table(Analytic_Data$County.FIPS.Group)
knitr::opts_chunk$set(echo = TRUE)
#Load the Needed Libraries
library(tidyverse)
library(here)
library(caret)
#Clear the Environment
rm(list = ls())
#Check to Determine if this Process has already been Completed
if (file.exists(here("df_with_County_Groups.csv")) == FALSE) {
#Import the Analytic Data
Analytic_Data <-
read.csv(here("df.csv"))
#Set a Seed for Reproducibility
set.seed(15)
#Randomly Order all of the County FIPS and Place in Data Frame
Groups_Data <-
data.frame(sample(
unique(Analytic_Data$County.FIPS),
length(unique(Analytic_Data$County.FIPS)),
replace = FALSE
))
#Assign Group to County FIPS based on the Row Number
for (i in 1:nrow(Groups_Data)) {
if (i <= round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 1
} else
if (i <= 2 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 2
} else
if (i <= 3 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 3
} else
if (i <= 4 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 4
} else
if (i <= 5 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 5
} else
if (i <= 6 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 6
} else
if (i <= 7 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 7
} else
if (i <= 8 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 8
} else
if (i <= 9 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- 9
} else
{
Groups_Data[i, 2] <- 10
}
}
#Set Column Names
colnames(Groups_Data) <- c("County.FIPS", "County.FIPS.Group")
#Check the Number of Group Assignments
table(Groups_Data[, 2])
#Create New Column in Analytic Data
Analytic_Data$County.FIPS.Group <- NA
#Add Assignments to Analytic Data
for (i in 1:nrow(Analytic_Data)) {
for (j in 1:nrow(Groups_Data)) {
if (Analytic_Data$County.FIPS[i] == Groups_Data$County.FIPS[j]) {
Analytic_Data$County.FIPS.Group[i] = Groups_Data$County.FIPS.Group[j]
}
}
#Progress Tracker
if ((i / 100) == round(i / 100)) {
#Clear Console
cat("\014")
#Print Percent Complete
print(paste(round((
i / nrow(Analytic_Data) * 100
), 4), "% Complete", sep = ""))
}
#Completion Indicator
if (i == nrow(Analytic_Data)) {
#Clear Console
cat("\014")
#Print Done
print("100% Complete - Done!")
}
}
} else {
Analytic_Data <- read.csv(here("df_with_County_Groups.csv"))
print("Downloaded Analytic Data with County Groups from Git Hub")
}
#Check the Number of Observations in each Group
table(Analytic_Data$County.FIPS.Group)
#Overwrite Indicator
Overwrite <- FALSE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
#Create an Indicator to Determine if an Overwrite is Performed
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {
Overwrite_Necessary <- FALSE
}
#Write the Analytic_Data to a .csv File
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
#Print a Message Describing the Operation Outcome
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE, Operation Suspended")
}
table(Analytic_Data$County.FIPS.Group *
Analytic_Data$County.FIPS)
table(Analytic_Data$County.FIPS.Group,
Analytic_Data$County.FIPS)
table(Analytic_Data$County.FIPS)
table(Analytic_Data$County.FIPS,
Analytic_Data$County.FIPS.Group)
#Import the Analytic Data
Analytic_Data <-
read.csv(here("df.csv"))
#Set a Seed for Reproducibility
set.seed(15)
#Randomly Order all of the County FIPS and Place in Data Frame
Groups_Data <-
data.frame(sample(
unique(Analytic_Data$County.FIPS),
length(unique(Analytic_Data$County.FIPS)),
replace = FALSE
))
#Assign Group to County FIPS based on the Row Number
for (i in 1:nrow(Groups_Data)) {
if (i <= round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 1"
} else
if (i <= 2 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 2"
} else
if (i <= 3 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 3"
} else
if (i <= 4 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 4"
} else
if (i <= 5 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 5"
} else
if (i <= 6 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 6"
} else
if (i <= 7 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 7"
} else
if (i <= 8 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 8"
} else
if (i <= 9 * round(nrow(Groups_Data) / 10)) {
Groups_Data[i, 2] <- "Group 9"
} else
{
Groups_Data[i, 2] <- "Group 10"
}
}
#Set Column Names
colnames(Groups_Data) <- c("County.FIPS", "County.FIPS.Group")
#Check the Number of Group Assignments
table(Groups_Data[, 2])
#Create New Column in Analytic Data
Analytic_Data$County.FIPS.Group <- NA
#Add Assignments to Analytic Data
for (i in 1:nrow(Analytic_Data)) {
for (j in 1:nrow(Groups_Data)) {
if (Analytic_Data$County.FIPS[i] == Groups_Data$County.FIPS[j]) {
Analytic_Data$County.FIPS.Group[i] = Groups_Data$County.FIPS.Group[j]
}
}
#Progress Tracker
if ((i / 100) == round(i / 100)) {
#Clear Console
cat("\014")
#Print Percent Complete
print(paste(round((
i / nrow(Analytic_Data) * 100
), 4), "% Complete", sep = ""))
}
#Completion Indicator
if (i == nrow(Analytic_Data)) {
#Clear Console
cat("\014")
#Print Done
print("100% Complete - Done!")
}
}
#Show Data Summary Indicating County FIPS Assignment and the Number of Entries
#for each County
table(Analytic_Data$County.FIPS,
Analytic_Data$County.FIPS.Group)
#Show Data Summary Indicating County FIPS Assignment and the Number of Entries
#for each County
table(Analytic_Data$County.FIPS,
Analytic_Data$County.FIPS.Group)
#Check the Number of Observations in each Group
table(Analytic_Data$County.FIPS.Group)
#Overwrite Indicator
Overwrite <- TRUE
#Export Data
if (file.exists(here("df_with_County_Groups.csv")) == FALSE |
Overwrite == TRUE) {
#Create an Indicator to Determine if an Overwrite is Performed
if (file.exists(here("df_with_County_Groups.csv")) == TRUE &
Overwrite == TRUE) {
Overwrite_Necessary <- TRUE
} else {
Overwrite_Necessary <- FALSE
}
#Write the Analytic_Data to a .csv File
write.csv(
Analytic_Data,
file = here("df_with_County_Groups.csv"),
row.names = FALSE
)
#Print a Message Describing the Operation Outcome
if (Overwrite_Necessary == FALSE) {
print("Saved Analytic_Data as df_with_County_Groups.csv")
} else {
print("Overwrote df_with_County_Groups.csv")
}
} else {
print("File Exists and Overwrite = FALSE, Data Export Halted")
}
View(Analytic_Data)
Working_Data <- Analytic_Data[, c(7, 9:25, 43)]
View(Working_Data)
Training <- Working_Data[Working_Data$County.FIPS.Group == "Group 1",
-19]
View(Training)
Test <- Working_Data[Working_Data$County.FIPS.Group == "Group 1", -19]
Training <- Working_Data[Working_Data$County.FIPS.Group != "Group 1", -19]
Model <- train(Mortality ~ .,
data = Training,
method = "knn",
preProcess = c("center", "scale"))
#Subset the Needed Columns from the Analytic Data to Perform KNN Regression
Working_Data <- Analytic_Data[, c(7, 9:25, 43)]
#Subset the Test Set
Test <-
Working_Data[Working_Data$County.FIPS.Group == "Group 1",-19]
#Subset the Training Set
Training <-
Working_Data[Working_Data$County.FIPS.Group != "Group 1",-19]
#Perform the KNN Regression
Model <- train(
Mortality ~ .,
data = Training,
method = "knn",
preProcess = c("center", "scale"))
Test_Features <- subset(Model, select = -c(Mortality))
Test_Features <- subset(Model, select = -c(Mortality))
Test_Features <- subset(Test, select = -c(Mortality))
View(Test)
View(Test_Features)
Test_Target <- subset(Target, select = Mortality)[, 1]
Test_Target <- subset(Test, select = Mortality)[, 1]
Test_Features <- subset(Test, select = -c(Mortality))
Test_Target <- subset(Test, select = Mortality)[, 1]
Predictions <- predict(Model, newdata = Test_Features)
sqrt(mean((Test_Target - Predictions) ^ 2))
summary(Model)
mean((Test_Target - Predictions) ^ 2)
cor(Test_Target, Predictions) ^ 2
Model
Test_Features <- subset(Test, select = -c(Mortality))
Test_Target <- subset(Test, select = Mortality)[, 1]
Predictions <- predict(Model, newdata = Test_Features)
Predictions <- predict(Model, newdata = Test_Features)
mean((Test_Target - Predictions) ^ 2)
mean((Test_Target - Predictions) ^ 2)
cor(Test_Target, Predictions) ^ 2
>>>>>>> Stashed changes
